require 'cgi'
require 'json'
require 'net/https'

module UseragentApi
  class Client
    # @param api_key [String] UseragentAPI API key
    # @raise [ArgumentError] when `api_key` is invalid
    # @see https://useragentapi.com/docs/v4
    def initialize(api_key)
      raise ArgumentError, 'invalid API key' if api_key.empty?
      @api_key = api_key.freeze
      freeze
    end

    # @return [String] Returns the api key
    attr_reader :api_key

    # Parse an user agent using UseragenAPI
    #
    # @param user_agent [String] an user agent
    # @return [Hash] a Hash generated by parsing the JSON returned
    #   from the API call
    def parse(user_agent)
      response = request(user_agent)
      JSON.parse(response.body)
    end

    USERAGENT_API_FQDN = URI('https://useragentapi.com/')
    private_constant :USERAGENT_API_FQDN

    USER_AGENT = 'UseragentApi gem/%s' % VERSION
    private_constant :USER_AGENT

    private

    def request(user_agent)
      uri = request_uri(user_agent)
      Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
        http.get(uri.path, 'User-Agent' => USER_AGENT)
      end
    end

    def request_uri(user_agent)
      USERAGENT_API_FQDN.dup.tap do |uri|
        uri.path = '/api/v4/json/%s/%s' % [api_key, CGI.escape(user_agent)]
      end
    end
  end
end
